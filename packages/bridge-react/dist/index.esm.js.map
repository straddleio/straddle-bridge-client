{"version":3,"file":"index.esm.js","sources":["../src/StraddleBridge.tsx"],"sourcesContent":["'use client'\nimport { EBridgeMessageType, TMessage, TPaykeyResponse } from '@straddleio/bridge-core'\nimport { CSSProperties, forwardRef, Ref, useEffect, useRef, useState } from 'react'\n\nconst IFRAME_ID = 'Straddle-widget-iframe'\n\nexport const useStraddleBridge = ({ appUrl }: { appUrl: string }) => {\n    appUrl = appUrl.endsWith('/') ? appUrl.slice(0, -1) : appUrl\n    const [iframeMounted, setIframeMounted] = useState(false)\n    const [bridgeAppMounted, setBridgeAppMounted] = useState(false)\n    console.log({ bridgeAppMounted })\n    const parentOrigin = getParentOrigin()\n    const url = `${appUrl}/${parentOrigin}/`\n    const send = (message: TMessage) => {\n        const iframe = document.getElementById(IFRAME_ID) as HTMLIFrameElement\n        if (iframe) {\n            iframe.contentWindow?.postMessage(message, appUrl)\n        }\n    }\n    return { send, iframeMounted, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url }\n}\nconst getParentOrigin = () => typeof window !== 'undefined' && encodeURIComponent(window.location.origin.replace('https://', '').replace('http://', ''))\n\ntype TypeStraddleBridgeProps = {\n    appUrl: string\n    open?: boolean\n    token: string\n    onSuccess?: (payload: TPaykeyResponse) => void\n    onSuccessCTAClicked?: () => void\n    onClose?: () => void\n    onLoadError?: (err: ErrorEvent) => void\n    allowManualEntry?: boolean\n    onManualEntry?: () => void\n    onRetry?: () => void\n    className?: string\n    style?: CSSProperties\n}\n\nexport const StraddleBridge = forwardRef<HTMLElement, TypeStraddleBridgeProps & { verbose?: boolean }>((props, ref) => {\n    const {\n        appUrl,\n        open = true,\n        token,\n        onSuccess,\n        onSuccessCTAClicked,\n        onClose,\n        onLoadError,\n        allowManualEntry = true,\n        onManualEntry,\n        onRetry,\n        className,\n        style,\n        verbose,\n    } = props\n    const { send, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url } = useStraddleBridge({ appUrl })\n    const iframeMounted = useRef(false)\n\n    useEffect(() => {\n        let errorHandler: (errorEvent: ErrorEvent) => void\n        let messageHandler: (event: MessageEvent<TMessage>) => void\n        if (open) {\n            let iframe: HTMLIFrameElement | null = document.querySelector('#' + IFRAME_ID)\n            if (!iframe) {\n                // iframeMounted.current = true\n                iframe = document.createElement('iframe')\n                iframe.setAttribute('src', url)\n            }\n            errorHandler = (errorEvent: ErrorEvent) => {\n                console.error('Error loading Straddle Widget')\n                onLoadError?.(errorEvent)\n            }\n            if (iframe) {\n                iframe.addEventListener('error', errorHandler)\n            }\n            iframe.id = IFRAME_ID\n            let iframe_style = style\n            if (!style) {\n                iframe_style = { position: 'fixed', width: '100%', height: '100%', top: '0%', left: '0', zIndex: '2147483647' }\n            }\n            iframe_style && Object.assign(iframe.style, iframe_style)\n\n            if (className) {\n                className.split(' ').forEach((className) => {\n                    iframe.classList.add(className)\n                })\n            }\n            if (ref && 'current' in ref && ref.current && ref.current instanceof Node) {\n                ;(ref.current as HTMLElement).appendChild(iframe)\n            } else {\n                if (ref && 'current' in ref && (!ref.current || !(ref.current instanceof Node))) {\n                    console.warn('ref passed to StraddleBridge is not a valid ref, reverting to appening to body. Ref passed:', ref.current)\n                }\n                document.getElementsByTagName('body')[0].appendChild(iframe)\n            }\n            messageHandler = function (event: MessageEvent<TMessage>) {\n                // Make sure the message is from the expected origin\n                // console.log('Message here', event.origin, appUrl, event.data)\n                if (event.origin === appUrl) {\n                    verbose &&\n                        event.data.type !== EBridgeMessageType.CONSOLE &&\n                        console.log('Straddle Bridge React client, Message received from widget:', event.data.type, event)\n                    const message = event.data\n                    switch (message?.type) {\n                        case EBridgeMessageType.PING:\n                            break\n                        case EBridgeMessageType.MOUNTED:\n                            setBridgeAppMounted(true)\n                            console.log('HERE, sending initialize', allowManualEntry)\n                            // alert('sending initialize with allowManualEntry' + allowManualEntry)\n                            send({ type: EBridgeMessageType.INITIALIZE, token, allowManualEntry })\n                            break\n                        case EBridgeMessageType.ON_CLOSE:\n                            onClose?.()\n                            setBridgeAppMounted(false)\n                            document.querySelector(`#${IFRAME_ID}`)?.remove()\n                            break\n                        case EBridgeMessageType.ON_SUCCESS_CTA_CLICKED:\n                            onSuccessCTAClicked?.()\n                            break\n                        case EBridgeMessageType.ON_PAYKEY:\n                            onSuccess?.(message.paykeyResponse)\n                            break\n                        case EBridgeMessageType.ON_MANUAL_ENTRY:\n                            onManualEntry?.()\n                            break\n                        case EBridgeMessageType.ON_RETRY:\n                            onRetry?.()\n                            break\n                        case EBridgeMessageType.CONSOLE:\n                            {\n                                const parsedPayload: any = message.payload.map((item: any) => {\n                                    try {\n                                        return JSON.parse(item)\n                                    } catch {\n                                        return item\n                                    }\n                                })\n                                'method' in message && (console[message.method] as Function).apply(console, parsedPayload)\n                            }\n                            break\n                    }\n                }\n            }\n            window.addEventListener('message', messageHandler)\n        } else if (!open && iframeMounted) {\n            document.querySelector(`#${IFRAME_ID}`)?.remove()\n            setIframeMounted(false)\n            iframeMounted.current = false\n            setBridgeAppMounted(false)\n        }\n        return () => {\n            const iframe: HTMLIFrameElement | null = document.querySelector('#' + IFRAME_ID)\n            errorHandler && iframe && iframe.removeEventListener('error', errorHandler)\n            messageHandler && window.removeEventListener('message', messageHandler)\n        }\n    }, [open])\n    useEffect(() => {\n        typeof window !== 'undefined' &&\n            ((window as any).straddleDebug = {\n                enable: () => send({ type: EBridgeMessageType.DEBUG, enable: true }),\n                disable: () => send({ type: EBridgeMessageType.DEBUG, enable: false }),\n            })\n    }, [])\n    return null\n})\n\nStraddleBridge.displayName = 'StraddleBridge'\n"],"names":["IFRAME_ID","useStraddleBridge","appUrl","endsWith","slice","iframeMounted","setIframeMounted","useState","bridgeAppMounted","setBridgeAppMounted","console","log","parentOrigin","getParentOrigin","send","message","iframe","document","getElementById","_a","contentWindow","postMessage","url","window","encodeURIComponent","location","origin","replace","StraddleBridge","forwardRef","props","ref","open","token","onSuccess","onSuccessCTAClicked","onClose","onLoadError","allowManualEntry","onManualEntry","onRetry","className","style","verbose","useRef","useEffect","errorHandler","messageHandler","querySelector","createElement","setAttribute","errorEvent","error","addEventListener","id","iframe_style","position","width","height","top","left","zIndex","Object","assign","split","forEach","classList","add","current","Node","appendChild","warn","getElementsByTagName","event","data","type","EBridgeMessageType","CONSOLE","PING","MOUNTED","INITIALIZE","ON_CLOSE","remove","ON_SUCCESS_CTA_CLICKED","ON_PAYKEY","paykeyResponse","ON_MANUAL_ENTRY","ON_RETRY","parsedPayload","payload","map","item","JSON","parse","method","apply","removeEventListener","straddleDebug","enable","DEBUG","disable","displayName"],"mappings":"yIAIA,MAAMA,EAAY,yBAELC,EAAoB,EAAGC,aAChCA,EAASA,EAAOC,SAAS,KAAOD,EAAOE,MAAM,GAAI,GAAKF,EACtD,MAAOG,EAAeC,GAAoBC,GAAS,IAC5CC,EAAkBC,GAAuBF,GAAS,GACzDG,QAAQC,IAAI,CAAEH,qBACd,MAAMI,EAAeC,IAQrB,MAAO,CAAEC,KANKC,UACV,MAAMC,EAASC,SAASC,eAAelB,GACnCgB,IACsB,QAAtBG,EAAAH,EAAOI,qBAAe,IAAAD,GAAAA,EAAAE,YAAYN,EAASb,KAGpCG,gBAAeC,mBAAkBE,mBAAkBC,sBAAqBa,IAP3E,GAAGpB,KAAUU,KAOmE,EAE1FC,EAAkB,IAAwB,oBAAXU,QAA0BC,mBAAmBD,OAAOE,SAASC,OAAOC,QAAQ,WAAY,IAAIA,QAAQ,UAAW,KAiBvIC,EAAiBC,GAAyE,CAACC,EAAOC,KAC3G,MAAM7B,OACFA,EAAM8B,KACNA,GAAO,EAAIC,MACXA,EAAKC,UACLA,EAASC,oBACTA,EAAmBC,QACnBA,EAAOC,YACPA,EAAWC,iBACXA,GAAmB,EAAIC,cACvBA,EAAaC,QACbA,EAAOC,UACPA,EAASC,MACTA,EAAKC,QACLA,GACAb,GACEhB,KAAEA,EAAIR,iBAAEA,EAAgBE,iBAAEA,EAAgBC,oBAAEA,EAAmBa,IAAEA,GAAQrB,EAAkB,CAAEC,WAC7FG,EAAgBuC,GAAO,GA4G7B,OA1GAC,GAAU,WACN,IAAIC,EACAC,EACJ,GAAIf,EAAM,CACN,IAAIhB,EAAmCC,SAAS+B,cAAc,IAAMhD,GAC/DgB,IAEDA,EAASC,SAASgC,cAAc,UAChCjC,EAAOkC,aAAa,MAAO5B,IAE/BwB,EAAgBK,IACZzC,QAAQ0C,MAAM,iCACdf,SAAAA,EAAcc,EAAW,EAEzBnC,GACAA,EAAOqC,iBAAiB,QAASP,GAErC9B,EAAOsC,GAAKtD,EACZ,IAAIuD,EAAeb,EACdA,IACDa,EAAe,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,OAAQC,IAAK,KAAMC,KAAM,IAAKC,OAAQ,eAErGN,GAAgBO,OAAOC,OAAO/C,EAAO0B,MAAOa,GAExCd,GACAA,EAAUuB,MAAM,KAAKC,SAASxB,IAC1BzB,EAAOkD,UAAUC,IAAI1B,EAAU,IAGnCV,GAAO,YAAaA,GAAOA,EAAIqC,SAAWrC,EAAIqC,mBAAmBC,KAC/DtC,EAAIqC,QAAwBE,YAAYtD,KAEtCe,KAAO,YAAaA,IAASA,EAAIqC,SAAarC,EAAIqC,mBAAmBC,MACrE3D,QAAQ6D,KAAK,8FAA+FxC,EAAIqC,SAEpHnD,SAASuD,qBAAqB,QAAQ,GAAGF,YAAYtD,IAEzD+B,EAAiB,SAAU0B,SAGvB,GAAIA,EAAM/C,SAAWxB,EAAQ,CACzByC,GACI8B,EAAMC,KAAKC,OAASC,EAAmBC,SACvCnE,QAAQC,IAAI,8DAA+D8D,EAAMC,KAAKC,KAAMF,GAChG,MAAM1D,EAAU0D,EAAMC,KACtB,OAAQ3D,aAAO,EAAPA,EAAS4D,MACb,KAAKC,EAAmBE,KACpB,MACJ,KAAKF,EAAmBG,QACpBtE,GAAoB,GACpBC,QAAQC,IAAI,2BAA4B2B,GAExCxB,EAAK,CAAE6D,KAAMC,EAAmBI,WAAY/C,QAAOK,qBACnD,MACJ,KAAKsC,EAAmBK,SACpB7C,SAAAA,IACA3B,GAAoB,GACmB,QAAvCU,EAAAF,SAAS+B,cAAc,IAAIhD,YAAY,IAAAmB,GAAAA,EAAE+D,SACzC,MACJ,KAAKN,EAAmBO,uBACpBhD,SAAAA,IACA,MACJ,KAAKyC,EAAmBQ,UACpBlD,SAAAA,EAAYnB,EAAQsE,gBACpB,MACJ,KAAKT,EAAmBU,gBACpB/C,SAAAA,IACA,MACJ,KAAKqC,EAAmBW,SACpB/C,SAAAA,IACA,MACJ,KAAKoC,EAAmBC,QACpB,CACI,MAAMW,EAAqBzE,EAAQ0E,QAAQC,KAAKC,IAC5C,IACI,OAAOC,KAAKC,MAAMF,GACpB,MAAAxE,GACE,OAAOwE,MAGf,WAAY5E,GAAYL,QAAQK,EAAQ+E,QAAqBC,MAAMrF,QAAS8E,KAK/F,EACDjE,OAAO8B,iBAAiB,UAAWN,QAC3Bf,GAAQ3B,IACuB,QAAvCc,EAAAF,SAAS+B,cAAc,IAAIhD,YAAY,IAAAmB,GAAAA,EAAE+D,SACzC5E,GAAiB,GACjBD,EAAc+D,SAAU,EACxB3D,GAAoB,IAExB,MAAO,KACH,MAAMO,EAAmCC,SAAS+B,cAAc,IAAMhD,GACtE8C,GAAgB9B,GAAUA,EAAOgF,oBAAoB,QAASlD,GAC9DC,GAAkBxB,OAAOyE,oBAAoB,UAAWjD,EAAe,CAC1E,GACF,CAACf,IACJa,GAAU,KACY,oBAAXtB,SACDA,OAAe0E,cAAgB,CAC7BC,OAAQ,IAAMpF,EAAK,CAAE6D,KAAMC,EAAmBuB,MAAOD,QAAQ,IAC7DE,QAAS,IAAMtF,EAAK,CAAE6D,KAAMC,EAAmBuB,MAAOD,QAAQ,KAChE,GACP,IACI,IAAI,IAGftE,EAAeyE,YAAc"}
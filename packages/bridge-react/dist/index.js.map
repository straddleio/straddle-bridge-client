{"version":3,"file":"index.js","sources":["../src/StraddleBridge.tsx"],"sourcesContent":["'use client'\nimport { EBridgeMessageType, TMessage, TMode, TPaykeyResponse } from '@straddleio/bridge-core'\nimport { CSSProperties, forwardRef, useEffect, useRef, useState } from 'react'\nexport type { TMode } from '@straddleio/bridge-core'\n\nconst IFRAME_ID = 'Straddle-widget-iframe'\n\nconst appUrlDictionary: Record<TMode, string> = {\n    production: 'https://bridge.straddle.io',\n    sandbox: 'https://bridge-sandbox.straddle.io',\n}\n\nconst getAppURLFromMode = (mode?: TMode) => appUrlDictionary[mode ?? 'production']\n\nexport const useStraddleBridge = ({ mode, appUrl }: { mode?: TMode; appUrl?: string }) => {\n    appUrl = appUrl ?? getAppURLFromMode(mode)\n    appUrl = appUrl.endsWith('/') ? appUrl.slice(0, -1) : appUrl\n    const [bridgeAppMounted, setBridgeAppMounted] = useState(false)\n    const parentOrigin = getParentOrigin()\n    const url = `${appUrl}/${parentOrigin}/`\n    const send = (message: TMessage) => {\n        const iframe = document.getElementById(IFRAME_ID) as HTMLIFrameElement\n        if (iframe) {\n            iframe.contentWindow?.postMessage(message, appUrl)\n        }\n    }\n    return { send, bridgeAppMounted, setBridgeAppMounted, url, appUrl }\n}\nconst getParentOrigin = () => typeof window !== 'undefined' && encodeURIComponent(window.location.origin.replace('https://', '').replace('http://', ''))\n\ntype TypeStraddleBridgeProps = {\n    mode?: TMode\n    appUrl?: string\n    open?: boolean\n    token: string\n    onSuccess: (payload: TPaykeyResponse) => void\n    onSuccessCTAClicked?: () => void\n    onClose?: () => void\n    onLoadError?: (err: ErrorEvent) => void\n    allowManualEntry?: boolean\n    onManualEntry?: () => void\n    onRetry?: () => void\n    className?: string\n    style?: CSSProperties\n}\n\nexport const StraddleBridge = forwardRef<HTMLElement, TypeStraddleBridgeProps & { verbose?: boolean }>((props, ref) => {\n    const {\n        mode,\n        open = true,\n        token,\n        onSuccess,\n        onSuccessCTAClicked,\n        onClose,\n        onLoadError,\n        allowManualEntry = true,\n        onManualEntry,\n        onRetry,\n        className,\n        style,\n        verbose,\n    } = props\n    const { send, setBridgeAppMounted, url, appUrl } = useStraddleBridge({ mode, appUrl: props.appUrl })\n    const iframeMounted = useRef(false)\n    useEffect(() => {\n        let errorHandler: (errorEvent: ErrorEvent) => void\n        let messageHandler: (event: MessageEvent<TMessage>) => void\n        if (open && !iframeMounted.current) {\n            let iframe: HTMLIFrameElement | null = document.querySelector('#' + IFRAME_ID)\n            if (!iframe) {\n                iframe = document.createElement('iframe')\n                iframe.setAttribute('src', `${url}?allowManualEntry=${allowManualEntry}`)\n            }\n            errorHandler = (errorEvent: ErrorEvent) => {\n                console.error('Error loading Straddle Widget')\n                onLoadError?.(errorEvent)\n            }\n            if (iframe) {\n                iframe.addEventListener('error', errorHandler)\n            }\n            iframe.id = IFRAME_ID\n            let iframe_style = style\n            if (!style) {\n                iframe_style = { position: 'fixed', width: '100%', height: '100%', top: '0%', left: '0', zIndex: '2147483647' }\n                // iframe_style = { position: 'fixed', width: '100%', height: '100%', top: '0%', left: '0', zIndex: '2147483647', backgroundColor: '#fafaf9' }\n            }\n            iframe_style && Object.assign(iframe.style, iframe_style)\n\n            if (className) {\n                className.split(' ').forEach((className) => {\n                    iframe.classList.add(className)\n                })\n            }\n            if (ref && 'current' in ref && ref.current && ref.current instanceof Node) {\n                ;(ref.current as HTMLElement).appendChild(iframe)\n            } else {\n                if (ref && 'current' in ref && (!ref.current || !(ref.current instanceof Node))) {\n                    console.warn('ref passed to StraddleBridge is not a valid ref, reverting to appening to body. Ref passed:', ref.current)\n                }\n                document.getElementsByTagName('body')[0].appendChild(iframe)\n                iframeMounted.current = true\n            }\n            messageHandler = function (event: MessageEvent<TMessage>) {\n                // Make sure the message is from the expected origin\n                // console.log('Message here', event.origin, appUrl, event.data)\n                if (event.origin === appUrl) {\n                    verbose &&\n                        event.data.type !== EBridgeMessageType.CONSOLE &&\n                        console.log('Straddle Bridge React client, Message received from widget:', event.data.type, event)\n                    const message = event.data\n                    switch (message?.type) {\n                        case EBridgeMessageType.PING:\n                            break\n                        case EBridgeMessageType.MOUNTED:\n                            setBridgeAppMounted(true)\n                            send({ type: EBridgeMessageType.INITIALIZE, token })\n                            break\n                        case EBridgeMessageType.ON_CLOSE:\n                            onClose?.()\n                            setBridgeAppMounted(false)\n                            document.querySelector(`#${IFRAME_ID}`)?.remove()\n                            break\n                        case EBridgeMessageType.ON_SUCCESS_CTA_CLICKED:\n                            onSuccessCTAClicked?.()\n                            break\n                        case EBridgeMessageType.ON_PAYKEY:\n                            onSuccess?.(message.paykeyResponse)\n                            break\n                        case EBridgeMessageType.ON_MANUAL_ENTRY:\n                            onManualEntry?.()\n                            break\n                        case EBridgeMessageType.ON_RETRY:\n                            onRetry?.()\n                            break\n                        case EBridgeMessageType.CONSOLE:\n                            {\n                                const parsedPayload: any = message.payload.map((item: any) => {\n                                    try {\n                                        return JSON.parse(item)\n                                    } catch {\n                                        return item\n                                    }\n                                })\n                                'method' in message && (console[message.method] as Function).apply(console, parsedPayload)\n                            }\n                            break\n                    }\n                }\n            }\n            window.addEventListener('message', messageHandler)\n        } else if (!open) {\n            document.querySelector(`#${IFRAME_ID}`)?.remove()\n            iframeMounted.current = false\n            setBridgeAppMounted(false)\n        }\n        return () => {\n            const iframe: HTMLIFrameElement | null = document.querySelector('#' + IFRAME_ID)\n            errorHandler && iframe && iframe.removeEventListener('error', errorHandler)\n            messageHandler && window.removeEventListener('message', messageHandler)\n        }\n    }, [open])\n    useEffect(() => {\n        typeof window !== 'undefined' &&\n            ((window as any).straddleDebug = {\n                enable: () => send({ type: EBridgeMessageType.DEBUG, enable: true }),\n                disable: () => send({ type: EBridgeMessageType.DEBUG, enable: false }),\n            })\n    }, [])\n    return null\n})\n\nStraddleBridge.displayName = 'StraddleBridge'\n"],"names":["IFRAME_ID","appUrlDictionary","production","sandbox","useStraddleBridge","mode","appUrl","getAppURLFromMode","endsWith","slice","bridgeAppMounted","setBridgeAppMounted","useState","parentOrigin","getParentOrigin","send","message","iframe","document","getElementById","_a","contentWindow","postMessage","url","window","encodeURIComponent","location","origin","replace","StraddleBridge","forwardRef","props","ref","open","token","onSuccess","onSuccessCTAClicked","onClose","onLoadError","allowManualEntry","onManualEntry","onRetry","className","style","verbose","iframeMounted","useRef","useEffect","errorHandler","messageHandler","current","querySelector","createElement","setAttribute","errorEvent","console","error","addEventListener","id","iframe_style","position","width","height","top","left","zIndex","Object","assign","split","forEach","classList","add","Node","appendChild","warn","getElementsByTagName","event","data","type","EBridgeMessageType","CONSOLE","log","PING","MOUNTED","INITIALIZE","ON_CLOSE","remove","ON_SUCCESS_CTA_CLICKED","ON_PAYKEY","paykeyResponse","ON_MANUAL_ENTRY","ON_RETRY","parsedPayload","payload","map","item","JSON","parse","method","apply","removeEventListener","straddleDebug","enable","DEBUG","disable","displayName"],"mappings":"yEAKA,MAAMA,EAAY,yBAEZC,EAA0C,CAC5CC,WAAY,6BACZC,QAAS,sCAKAC,EAAoB,EAAGC,OAAMC,aACtCA,EAASA,QAAAA,EAHa,CAACD,GAAiBJ,EAAiBI,QAAAA,EAAQ,cAG9CE,CAAkBF,GACrCC,EAASA,EAAOE,SAAS,KAAOF,EAAOG,MAAM,GAAI,GAAKH,EACtD,MAAOI,EAAkBC,GAAuBC,EAAAA,UAAS,GACnDC,EAAeC,IAQrB,MAAO,CAAEC,KANKC,UACV,MAAMC,EAASC,SAASC,eAAenB,GACnCiB,IACsB,QAAtBG,EAAAH,EAAOI,qBAAe,IAAAD,GAAAA,EAAAE,YAAYN,EAASV,KAGpCI,mBAAkBC,sBAAqBY,IAP1C,GAAGjB,KAAUO,KAOkCP,SAAQ,EAEjEQ,EAAkB,IAAwB,oBAAXU,QAA0BC,mBAAmBD,OAAOE,SAASC,OAAOC,QAAQ,WAAY,IAAIA,QAAQ,UAAW,KAkBvIC,EAAiBC,EAAUA,YAA+D,CAACC,EAAOC,KAC3G,MAAM3B,KACFA,EAAI4B,KACJA,GAAO,EAAIC,MACXA,EAAKC,UACLA,EAASC,oBACTA,EAAmBC,QACnBA,EAAOC,YACPA,EAAWC,iBACXA,GAAmB,EAAIC,cACvBA,EAAaC,QACbA,EAAOC,UACPA,EAASC,MACTA,EAAKC,QACLA,GACAb,GACEhB,KAAEA,EAAIJ,oBAAEA,EAAmBY,IAAEA,EAAGjB,OAAEA,GAAWF,EAAkB,CAAEC,OAAMC,OAAQyB,EAAMzB,SACrFuC,EAAgBC,EAAMA,QAAC,GAyG7B,OAxGAC,EAAAA,WAAU,WACN,IAAIC,EACAC,EACJ,GAAIhB,IAASY,EAAcK,QAAS,CAChC,IAAIjC,EAAmCC,SAASiC,cAAc,IAAMnD,GAC/DiB,IACDA,EAASC,SAASkC,cAAc,UAChCnC,EAAOoC,aAAa,MAAO,GAAG9B,sBAAwBgB,MAE1DS,EAAgBM,IACZC,QAAQC,MAAM,iCACdlB,SAAAA,EAAcgB,EAAW,EAEzBrC,GACAA,EAAOwC,iBAAiB,QAAST,GAErC/B,EAAOyC,GAAK1D,EACZ,IAAI2D,EAAehB,EACdA,IACDgB,EAAe,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,OAAQC,IAAK,KAAMC,KAAM,IAAKC,OAAQ,eAGrGN,GAAgBO,OAAOC,OAAOlD,EAAO0B,MAAOgB,GAExCjB,GACAA,EAAU0B,MAAM,KAAKC,SAAS3B,IAC1BzB,EAAOqD,UAAUC,IAAI7B,EAAU,IAGnCV,GAAO,YAAaA,GAAOA,EAAIkB,SAAWlB,EAAIkB,mBAAmBsB,KAC/DxC,EAAIkB,QAAwBuB,YAAYxD,KAEtCe,KAAO,YAAaA,IAASA,EAAIkB,SAAalB,EAAIkB,mBAAmBsB,MACrEjB,QAAQmB,KAAK,8FAA+F1C,EAAIkB,SAEpHhC,SAASyD,qBAAqB,QAAQ,GAAGF,YAAYxD,GACrD4B,EAAcK,SAAU,GAE5BD,EAAiB,SAAU2B,SAGvB,GAAIA,EAAMjD,SAAWrB,EAAQ,CACzBsC,GACIgC,EAAMC,KAAKC,OAASC,EAAAA,mBAAmBC,SACvCzB,QAAQ0B,IAAI,8DAA+DL,EAAMC,KAAKC,KAAMF,GAChG,MAAM5D,EAAU4D,EAAMC,KACtB,OAAQ7D,aAAO,EAAPA,EAAS8D,MACb,KAAKC,EAAkBA,mBAACG,KACpB,MACJ,KAAKH,EAAkBA,mBAACI,QACpBxE,GAAoB,GACpBI,EAAK,CAAE+D,KAAMC,EAAkBA,mBAACK,WAAYlD,UAC5C,MACJ,KAAK6C,EAAkBA,mBAACM,SACpBhD,SAAAA,IACA1B,GAAoB,GACmB,QAAvCS,EAAAF,SAASiC,cAAc,IAAInD,YAAY,IAAAoB,GAAAA,EAAEkE,SACzC,MACJ,KAAKP,EAAkBA,mBAACQ,uBACpBnD,SAAAA,IACA,MACJ,KAAK2C,EAAkBA,mBAACS,UACpBrD,SAAAA,EAAYnB,EAAQyE,gBACpB,MACJ,KAAKV,EAAkBA,mBAACW,gBACpBlD,SAAAA,IACA,MACJ,KAAKuC,EAAkBA,mBAACY,SACpBlD,SAAAA,IACA,MACJ,KAAKsC,EAAkBA,mBAACC,QACpB,CACI,MAAMY,EAAqB5E,EAAQ6E,QAAQC,KAAKC,IAC5C,IACI,OAAOC,KAAKC,MAAMF,GACpB,MAAA3E,GACE,OAAO2E,MAGf,WAAY/E,GAAYuC,QAAQvC,EAAQkF,QAAqBC,MAAM5C,QAASqC,KAK/F,EACDpE,OAAOiC,iBAAiB,UAAWR,QAC3BhB,IAC+B,QAAvCb,EAAAF,SAASiC,cAAc,IAAInD,YAAY,IAAAoB,GAAAA,EAAEkE,SACzCzC,EAAcK,SAAU,EACxBvC,GAAoB,IAExB,MAAO,KACH,MAAMM,EAAmCC,SAASiC,cAAc,IAAMnD,GACtEgD,GAAgB/B,GAAUA,EAAOmF,oBAAoB,QAASpD,GAC9DC,GAAkBzB,OAAO4E,oBAAoB,UAAWnD,EAAe,CAC1E,GACF,CAAChB,IACJc,EAAAA,WAAU,KACY,oBAAXvB,SACDA,OAAe6E,cAAgB,CAC7BC,OAAQ,IAAMvF,EAAK,CAAE+D,KAAMC,EAAkBA,mBAACwB,MAAOD,QAAQ,IAC7DE,QAAS,IAAMzF,EAAK,CAAE+D,KAAMC,EAAkBA,mBAACwB,MAAOD,QAAQ,KAChE,GACP,IACI,IAAI,IAGfzE,EAAe4E,YAAc"}
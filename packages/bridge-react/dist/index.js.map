{"version":3,"file":"index.js","sources":["../src/StraddleBridge.tsx"],"sourcesContent":["'use client'\nimport { EBridgeMessageType, TMessage, TPaykeyResponse } from '@straddleio/bridge-core'\nimport { CSSProperties, forwardRef, Ref, useEffect, useRef, useState } from 'react'\n\nconst IFRAME_ID = 'Straddle-widget-iframe'\n\nexport const useStraddleBridge = ({ appUrl }: { appUrl: string }) => {\n    const [iframeMounted, setIframeMounted] = useState(false)\n    const [bridgeAppMounted, setBridgeAppMounted] = useState(false)\n    console.log({ bridgeAppMounted })\n    const parentOrigin = getParentOrigin()\n    const url = `${appUrl}/${parentOrigin}/`\n    const send = (message: TMessage) => {\n        const iframe = document.getElementById(IFRAME_ID) as HTMLIFrameElement\n        if (iframe) {\n            iframe.contentWindow?.postMessage(message, url)\n        }\n    }\n    return { send, iframeMounted, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url }\n}\nconst getParentOrigin = () => typeof window !== 'undefined' && encodeURIComponent(window.location.origin.replace('https://', '').replace('http://', ''))\n\ntype TypeStraddleBridgeProps = {\n    appUrl: string\n    open?: boolean\n    token: string\n    onSuccess?: (payload: TPaykeyResponse) => void\n    onSuccessCTAClicked?: () => void\n    onClose?: () => void\n    onLoadError?: (err: ErrorEvent) => void\n    onManualEntry?: () => void\n    onRetry?: () => void\n    className?: string\n    style?: CSSProperties\n}\n\nexport const StraddleBridge = forwardRef<HTMLElement, TypeStraddleBridgeProps & { verbose?: boolean }>((props, ref) => {\n    const { appUrl, open = true, token, onSuccess, onSuccessCTAClicked, onClose, onLoadError, onManualEntry, onRetry, className, style, verbose } = props\n    const { send, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url } = useStraddleBridge({ appUrl })\n    const iframeMounted = useRef(false)\n    useEffect(() => {\n        if (open && !iframeMounted.current) {\n            iframeMounted.current = true\n            const iframe = document.createElement('iframe')\n            iframe.setAttribute('src', url)\n            iframe.addEventListener('error', (errorEvent) => {\n                console.error('Error loading Straddle Widget')\n                onLoadError?.(errorEvent)\n            })\n            iframe.id = IFRAME_ID\n            let iframe_style = style\n            if (!style) {\n                iframe_style = { position: 'fixed', width: '100%', height: '100%', top: '0%', left: '0', zIndex: '2147483647' }\n            }\n            iframe_style && Object.assign(iframe.style, iframe_style)\n\n            if (className) {\n                className.split(' ').forEach((className) => {\n                    iframe.classList.add(className)\n                })\n            }\n            if (ref && 'current' in ref && ref.current && ref.current instanceof Node) {\n                ;(ref.current as HTMLElement).appendChild(iframe)\n            } else {\n                if (ref && 'current' in ref && (!ref.current || !(ref.current instanceof Node))) {\n                    console.warn('ref passed to StraddleBridge is not a valid ref, reverting to appening to body. Ref passed:', ref.current)\n                }\n                document.getElementsByTagName('body')[0].appendChild(iframe)\n            }\n\n            window.addEventListener('message', function (event: MessageEvent<TMessage>) {\n                // Make sure the message is from the expected origin\n                if (event.origin === appUrl) {\n                    verbose &&\n                        event.data.type !== EBridgeMessageType.CONSOLE &&\n                        console.log('Straddle Bridge React client, Message received from widget:', event.data.type, event)\n                    const message = event.data\n                    switch (message?.type) {\n                        case EBridgeMessageType.PING:\n                            break\n                        case EBridgeMessageType.MOUNTED:\n                            setBridgeAppMounted(true)\n                            send({ type: EBridgeMessageType.INITIALIZE, token })\n                            break\n                        case EBridgeMessageType.ON_CLOSE:\n                            onClose?.()\n                            setBridgeAppMounted(false)\n                            document.querySelector(`#${IFRAME_ID}`)?.remove()\n                            break\n                        case EBridgeMessageType.ON_SUCCESS_CTA_CLICKED:\n                            onSuccessCTAClicked?.()\n                            break\n                        case EBridgeMessageType.ON_PAYKEY:\n                            onSuccess?.(message.paykeyResponse)\n                            break\n                        case EBridgeMessageType.ON_MANUAL_ENTRY:\n                            onManualEntry?.()\n                            break\n                        case EBridgeMessageType.ON_RETRY:\n                            onRetry?.()\n                            break\n                        case EBridgeMessageType.CONSOLE:\n                            {\n                                const parsedPayload: any = message.payload.map((item: any) => {\n                                    try {\n                                        return JSON.parse(item)\n                                    } catch {\n                                        return item\n                                    }\n                                })\n                                'method' in message && (console[message.method] as Function).apply(console, parsedPayload)\n                            }\n                            break\n                    }\n                }\n            })\n        } else if (!open && iframeMounted) {\n            document.querySelector(`#${IFRAME_ID}`)?.remove()\n            setIframeMounted(false)\n            iframeMounted.current = false\n            setBridgeAppMounted(false)\n        }\n    }, [open, bridgeAppMounted])\n    useEffect(() => {\n        typeof window !== 'undefined' &&\n            ((window as any).verbose = {\n                enable: () => send({ type: EBridgeMessageType.DEBUG, enable: true }),\n                disable: () => send({ type: EBridgeMessageType.DEBUG, enable: false }),\n            })\n    }, [])\n    return null\n})\n\nStraddleBridge.displayName = 'StraddleBridge'\n"],"names":["IFRAME_ID","useStraddleBridge","appUrl","iframeMounted","setIframeMounted","useState","bridgeAppMounted","setBridgeAppMounted","console","log","url","getParentOrigin","send","message","iframe","document","getElementById","_a","contentWindow","postMessage","window","encodeURIComponent","location","origin","replace","StraddleBridge","forwardRef","props","ref","open","token","onSuccess","onSuccessCTAClicked","onClose","onLoadError","onManualEntry","onRetry","className","style","verbose","useRef","useEffect","current","createElement","setAttribute","addEventListener","errorEvent","error","id","iframe_style","position","width","height","top","left","zIndex","Object","assign","split","forEach","classList","add","Node","appendChild","warn","getElementsByTagName","event","data","type","EBridgeMessageType","CONSOLE","PING","MOUNTED","INITIALIZE","ON_CLOSE","querySelector","remove","ON_SUCCESS_CTA_CLICKED","ON_PAYKEY","paykeyResponse","ON_MANUAL_ENTRY","ON_RETRY","parsedPayload","payload","map","item","JSON","parse","method","apply","enable","DEBUG","disable","displayName"],"mappings":"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"}